= Remarkup语法参考 =

Phabrico使用了一种名为 "Remarkup "的轻量级标记语言，类似于Markdown和Wiki标记等其他轻量级标记语言。
本文档介绍了如何使用Remarkup格式化文本。

=快速参考 =

所有的语法在下面会有更详细的解释，但这是一个在Remarkup中格式化文本的快速指南。

这些都是内联样式，可以应用于大多数文本:
```
**粗体** //斜体// `等宽字` ##等宽字## ~~删除线~~ __下划线__
!!高亮的文字!!
T123                      # 与任务的链接
{T123}                    # 一个任务的链接(带描述)
{F123}                    # 嵌入图像
@username                 # 提到一个用户
#project                  # 提到一个项目
[[wiki page]]             # 一个维基文档的链接
[[wiki page | 带描述]]     # 维基文档的链接（带描述)
http://xyz/               # 网站链接
[[http://xyz/ | 带描述]]   # 网站链接（带描述)
[带描述](http://xyz/)      # 网站链接（带描述)
```
这些都是块状样式，必须用空行与周围的文字分开。
```
= 章 =

== 子章 ==

## 这也是一章

这也是一章
=========

这也是一个分章
-------------

> 这是一些引用的文字

使用`-`或 `*`创建带项目符号的列表，使用 `#`创建带编号的列表。

使用```或缩进两个空格来创建代码块。
使用%%%表示文字块。
使用| ... | ...来创建表格。
```

= 基本文本格式化 =

你可以这样格式化**基本的文本样式**:
```
**这是黑体文字**
//这是斜体文字//
`这是单行距文本`
##这是单行距文本##
~~这句话已被划掉~~
__这句话划了线__
!!这句话是高亮的!!
```

这些分别产生:
**这是黑体文字**、//这是斜体文字//、`这是单行距文本`、##这是单行距文本##、~~这句话已被划掉~~、__这句话划了线__和!!这句话是高亮的!!。

= 布局 =

创建**头这样的**:
```
= 章 =

== 子章 ==

===== 很小的标题 =====

大的标题
=======

另一个很小的标题
---------------
```

你可以选择省略末尾的`==`字符。
例如，这些都是一样的。

```
== 较小的页眉 ==

== 较小的标题
```

这将产生像本文档中的标题。确保在页眉前后有一个空行。

列表
====

创建**列表**，每个项目以`-`字符或`*`字符开头:
```
lang=text
- 牛奶
- 蛋类
- 麵包

* 鸭子
* 鸭子
* 鹅
```

这就产生了一个这样的列表:

- 牛奶
- 蛋类
- 麵包

(注意，你需要在"-"或 "*"后面加一个空格。)

你可以用 "#"代替"-"或 "*"来制作数字列表:

# 购买产品
# 拓展产品
# 将产品卖回，并获得可观的利润

编号列表也可以用`1.`或`1)`开始。
如果你使用`1`以外的数字，列表将从这个数字开始。
例如，这个。

```
200) 好的
201) 创建
202) 已接受
```

...将生成以下文本:

200) 好的
201) 创建
202) 已接受

你也可以像这样嵌套列表:

```
- 身体
  - 头
  - 手臂
    - 肘部
    - 手
      # 拇指
      # 食指
      # 中指
      # 无名指
      # 小指
  - 腿部
    - 膝关节
    - 脚步
```

...将生成以下文本:

- 身体
  - 脑袋
  - 手臂
    - 肘部
    - 手
      # 拇指
      # 食指
      # 中指
      # 无名指
      # 小指
  - 腿部
    - 膝关节
    - 脚步

如果你喜欢，你可以通过使用多个字符来显示缩进深度的列表，就像这样:

```
- 树木
-- 枝条
--- 小树枝
```

...将生成以下文本:

- 树木
-- 枝条
--- 小树枝

您可以通过在项目前添加"[ ]`或"[X]`来添加复选框，像这样。

```
- [X] 烤箱预热至450度
- [ ] 35个柠檬去皮
```

...将生成以下文本:

- [X] 烤箱预热至450度
- [ ] 35个柠檬去皮

通过缩进两个空格来创建**代码块**:

  f(x, y);

你也可以使用三个反标来包围代码块:

```
f(x, y);
g(f);
```

你可以用`lang=xxx`指定语法高亮的语言:
  lang=text
  lang=html
  <a href="#">...</a>

这将使用该语言的荧光笔（如果有的话）来高亮该块:
  lang=html
  <a href="#">...</a>

你也可以使用 `COUNTEREXAMPLE` 头来表明某个代码块是坏的，不应该被复制。
  lang=text
  COUNTEREXAMPLE
  function f() {
     global $$variable_variable;
  }

这样就产生了这样一个区块:

  COUNTEREXAMPLE
  function f() {
     global $$variable_variable;
  }

你可以使用`lines=N`来限制代码块的垂直大小，使用`name=some_name.ext`来给它命名。例如，这个:

lang=text
  lang=html, name=example.html, lines=4, counterexample
  <p>苹果公司</p>
  <p>杏子</p>
  <p>鳄梨</p>。
  <p>香蕉</p>
  <p>蓝莓</p>
  <p>葡萄</p>

...将生成以下文本:

  lang=html, name=example.html, lines=4, counterexample
  <p>苹果公司</p>
  <p>杏子</p>
  <p>鳄梨</p>。
  <p>香蕉</p>
  <p>蓝莓</p>
  <p>葡萄</p>

你可以使用 `NOTE:`、`WARNING:` 或 `IMPORTANT:` 元素来提请注意一个重要的想法。

比如说，写这样的:

```
NOTE: 定期召开会议，让员工保持清醒。
```

如果你想生产这样的东西:

NOTE: 定期召开会议，让员工保持清醒。

通过在行首使用`WARNING:`或`IMPORTANT:`，通知器的颜色将会改变。

WARNING: 会议太多，会让人寝食难安

IMPORTANT: 不要参加太多会议

此外，你可以使用`(NOTE)`、`(WARNING)`或`(IMORTANT)`来获得同样的效果，但在渲染结果中不出现`(NOTE)`、`(WARNING)`或`(IMORTANT)`。
例如，该通知人使用`(NOTE)`:

(NOTE) 不要参加太少的会议。


水平线
======

您可以用三条或更多的破折号来分割部分。
这将创建一个类似于`<hr />`HTML标签的分隔线或水平线，就像这样:

---

破折号需要出现在自己的行上，并与其他内容分开。
例如，像这样。

```
这一部分将在视觉上与其他部分分开。

---

在一个完全不同的话题上，...
```


= 网站的链接 =

URL自动格式化为超链接

如果你的URL中包含有问题的字符，比如 "`http://comma.org/,`"，你可以像这样用角括号把它括起来:
```
<http://comma.org/,>
```

这将迫使解析器使用完整的URL: <http://comma.org/,>

您也可以使用创建命名链接，在这里您可以选择显示的文本。这些工作在整个互联网上:
```
[[http://www.boring-legal-documents.com/ | exciting legal documents]]
```

你也可以在Markdown语法中使用链接:
```
[Toil](http://www.trouble.com)
```

= 链接到对象 =

你可以通过提及对象的名称来链接到Phabricator对象，比如任务:
```
T123          # 这是任务123的链接
```

= 嵌入对象

你也可以通过使用大括号对一些对象产生全名引用:
```
{T123}        # 链接到任务123的全称
```

当对象的状态发生变化时（例如，当任务被关闭时），这些引用也会显示出来。某些类型的对象支持丰富的嵌入。

== 链接到项目标签

可以通过 `#`字符链接到项目。
默认情况下使用项目名称（小写，下划线）。
此外，您还可以通过编辑项目详情来设置多个附加标签。
```
#qa, #quality_assurance
```

== 嵌入图片

你可以在图片或文件名称周围用括号将其嵌入:
```
{F123}
```

在大多数界面中，你可以将电脑中的图像拖放到文本区域。

大多数浏览器也支持上传图片数据，只需将它们从剪贴板粘贴到文本区域即可。

你可以这样设置文件显示选项:
```
{F123, layout=left, float, size=full, alt="雏鸭"}
```

所有文件的有效选项是:

- **layout**
  - left : 这将把图像放在左边（默认）
  - center : 这将使图像在中心水平排列。
  - right :  这将把图像放在右边。
  - inline : 这将把图像放在左边，但更靠近上一行和下一行。
  - link : 这将呈现一个链接，而不是图片本身。
- **name** : 当 `layout` 被设置为 `link` 时，或者对于非图像，使用这个名称作为链接文本。
- **alt** 这为辅助技术提供了替代文本。

图像文件支持这些选项:

- **float*如果布局设置为左或右，图像将被浮动，以便文字环绕在图像周围。
- **size** thumb (默认), full.
- **width** 缩放图像到特定的宽度。
- **height** 缩放图像到特定的高度。

音频和视频文件支持这些选项。

- **media**: 指定媒体类型为`audio`或`video`。这允许您区分媒体文件的渲染方式。
- **loop**: 这将重复播放该媒体。
- **autoplay**: 这将自动开始播放该媒体。

= 引用文本 =

要引用文本，请在其前面加上">"。
```
  > 这是被引用的案文。
```

这个结果将是:

> 这是被引用的案文。

=表情包 =

你也可以将图片作为 "表情包"。
例如，如果你有一个名为 "脾气暴躁" 的图片宏，你可以通过以下操作创建一个 迷因:
```
{meme, src=脾气暴躁, above=顶部的文字, below=底部的文字}
```

NOTE: 你不能在發破日蔻中创建宏。你只能在Phabricator中创建它们。

= 提及用户 =

你可以在任务描述中或维基文件中像这样提到另一个用户:
```
@username
```

NOTE: 用户名不能包含汉字

图标
====

您可以使用`{icon ...}`语法为注释添加图标。
例如:
```
  {icon camera}
```

这就是渲染: {icon camera}

你可以选择图标的颜色。
```
  {icon camera color=blue}
```

这就是渲染: {icon camera color=blue}

关于可用图标的列表，请查看[[https://fontawesome.com/v4.7.0/icons/ | FontAwesome网站]]。
有以下颜色可供选择:
  - dark              {icon phabrico-square, color=dark}
  - bluegrey          {icon phabrico-square, color=bluegrey}
  - white             {icon phabrico-square, color=white}
  - red               {icon phabrico-square, color=red}
  - orange            {icon phabrico-square, color=orange}
  - yellow            {icon phabrico-square, color=yellow}
  - green             {icon phabrico-square, color=green}
  - blue              {icon phabrico-square, color=blue}
  - sky               {icon phabrico-square, color=sky}
  - indigo            {icon phabrico-square, color=indigo}
  - pink              {icon phabrico-square, color=pink}
  - fire              {icon phabrico-square, color=fire}
  - violet            {icon phabrico-square, color=violet}
  - lightbluetext     {icon phabrico-square, color=lightbluetext}
  - lightgreytext     {icon phabrico-square, color=lightgreytext}
  - grey              {icon phabrico-square, color=grey}

你可以添加 `spin` 参数来使图标旋转:
```
  {icon cog spin}
```

这就是渲染: {icon cog spin}


= 维基文件 =

你可以通过它们的路径链接到维基页:
```
  请务必在 [[legal/Letter of Marque and Reprisal]] 上签名并注明日期!
```

默认情况下，链接将以文档标题作为链接名。
使用管道字符(`|`)，你可以重新命名链接。
用这个来误导你的对手:
```
  看看这些 [[legal/boring_documents/ | 激动人心的法律文件]]!
```

如果你用 `./` 或 `../` 开始一个链接路径，路径的其余部分将相对于当前的维基页进行评估。
例如，如果你正在为文档 `fruit/` 编写内容，那么指向 `[[[./guava]]` 的链接与从其他地方指向 `[[fruit/guava]]` 的链接是一样的。

`../` 相对链接可以用来在文档树中向上移动。
在 `produce/vegetables/` 页面，你可以使用 `[[../fruit/guava]]` 链接到 `produce/fruit/guava` 页面。

当在维基页之外使用相对链接时，相对链接是不起作用的。
例如，你不能在任务的评论中使用相对链接，因为没有一个合理的地方可以让链接开始解析。

当文档被移动时，相对链接不会自动更新。
它们会被保存为当前所写。移动文档后，您可能需要检查和调整其中包含的任何相对链接。


= 文字块 =

要将文字放在文字块中，请使用`%%%`:
```
%%%不被 remarkup 处理的文字
[[http://www.example.com | 例子]]
%%%
```

Remarkup不会对文字块内的文本进行重新格式化（除了转义HTML和保留换行符）

= 表格 =

Remarkup支持简单的表格语法。
例如:
```
| 水果 | 颜色 | 价格    | 果皮？
| --- | ---- | -----   | -----
| 苹果 | 红色 | `¥5.95` | 没有
| 香蕉 | 黄   | `¥1.24` | **是**
```

...produces this:

| 水果 | 颜色 | 价格    | 果皮？
| --- | ---- | -----   | -----
| 苹果 | 红色 | `¥5.95` | 没有
| 香蕉 | 黄   | `¥1.24` | **是**

Remarkup还支持简化的HTML表格语法。
例如:

```
<table>
    <tr>
        <th>水果</th>
        <th>颜色</th>
        <th>价格</th>
        <th>果皮？</th>
    </tr>
    <tr>
        <td>苹果</td>
        <td>红色</td>
        <td>`¥5.95`</td>
        <td>没有</td>
    </tr>
    <tr>
        <td>香蕉</td>
        <td>黄</td>
        <td>`¥1.24`</td>
        <td>**是**</td>
    </tr>
</table>
```

...产生这种:

<table>
    <tr>
        <th>水果</th>
        <th>颜色</th>
        <th>价格</th>
        <th>果皮？</th>
    </tr>
    <tr>
        <td>苹果</td>
        <td>红色</td>
        <td>`¥5.95`</td>
        <td>没有</td>
    </tr>
    <tr>
        <td>香蕉</td>
        <td>黄</td>
        <td>`¥1.24`</td>
        <td>**是**</td>
    </tr>
</table>

关于这种语法的一些一般性说明。

- 你的标签必须保持适当的平衡
- 你的标签必须不包含属性 (允许使用 `<td>`，禁止使用 `<td style="...">`)。
  - 你可以在表格单元格内使用其他Remarkup规则（如**粗体**，//斜体//等）。

导航顺序
=======

您可以使用 `{nav ...}` 来呈现风格化的导航序列，帮助别人定位。
这在编写文档时很有用。
例如，您可以给别人提供购买柠檬的方向:

{nav icon=home, name=首页 >
超市 >
水果部 >
icon=lemon-o, name=柠檬}

你应该用这个代码来渲染这个例子:

```
{nav icon=home, name=首页 >
超市 >
水果部 >
icon=lemon-o, name=柠檬}
```

一般来说：
  - 各节之间用">"分隔。
  - 每个部分可以有一个名称和不同的参数。
  - 可用的参数有 `icon`、`name`、`type` 和 `href`。
  - 如果 `type` 参数被同化为 `instructions`，则表示用户必须做出选择或遵循特定的指令。

击键
====

键盘上的击键

您可以使用`{key ...}`来呈现一个风格化的按键。例如，这个。

```
按 {key M} 查看星图。
```

........呈现出这样的效果。

> 按 {key M} 查看星图。

您也可以使用修饰键渲染序列。这就是：

```
使用 {key command option shift 3} 进行截图。
按 {key down down-right right LP} 激活令牌技术。
```

......渲染这个。

> 使用 {key command option shift 3} 进行截图。
> 按 {key down down-right right LP} 激活令牌技术。
