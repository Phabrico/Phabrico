= Справочник по синтаксису Remarkup

Фабрико использует легкий язык разметки под названием "Remarkup", подобный
другим легким языкам разметки, таким как Markdown и Wiki.

В этом документе описано, как форматировать текст с помощью Remarkup.

= Краткое руководство =

Весь синтаксис более подробно описан ниже, но это краткое руководство по форматированию текста в Remarkup.

Это встроенные стили, которые можно применять к большинству текстов:
```
**жирный** //италический// `моношрифт` ##моношрифт## ~~удалённый~~ __подчёркнутый__
!!выделенный!!
T123                      # Ссылка на задачи
{T123}                    # Ссылка на задачи (полное имя)
{F123}                    # Вставлять изображения
@username                 # Упомянуть пользователя
#project                  # Упомянуть проект
[[wiki page]]             # Ссылка на фразу
[[wiki page | name]]      # Именованная ссылка на Вики
http://xyz/               # Ссылка на веб
[[http://xyz/ | name]]    # Именная ссылка на веб-сайт
[name](http://xyz/)       # Альтернативная ссылка
```
Это блочные стили, и они должны быть отделены от окружающего текста пустыми строками:
```
= Большой заголовок =

== Маленький заголовок ==

## Это тоже заголовок

Также большой заголовок
===================

Также меньший заголовок
---------------------

> Цитируемый текст

Используйте `-` или `*` для маркированных списков и `#` для нумерованных списков.
Используйте ``` или отступ в два пробела для кода.
Используйте %%% для буквенного блока.
Используйте | ... | ... для таблиц.
```

= Основной стиль =

Оформите **базовые стили текста** следующим образом:
```
**жирный текст**
//курсивный текст//
`моноширинный текст`
##моноширинный текст##
~~удаленный текст~~
__подчеркнутый текст__
!!выделенный текст!!
```

Это приведет к следующим результатам: 
**жирный текст**, //курсивный текст//, `моноширинный текст`, ##моноширинный текст##,
~~удаленный текст~~, __подчеркнутый текст__ и !!выделенный текст!!

= Расположение текста =

Сделайте **заголовки** следующим образом:
```
= Большой заголовок =

== Маленький заголовок ==

===== Очень маленький заголовок =====

Альтернативный большой заголовок
======================

Альтернативный малый заголовок
------------------------
```

По желанию вы можете опустить знаки `=`, то есть это одно и то же:

```
== Меньший заголовок ==

== Меньший заголовок
```

В результате получаются заголовки, подобные тем, что приведены в этом документе. Убедитесь, что перед и после заголовка есть пустая строка.

Списки
=====

Создавайте **списки**, начиная каждый элемент с `-` или `*`:
```
lang=text
- молоко
- яйца
- хлеб

* утка
* утка
* гусь
```

В результате получается такой список:

- молоко
- яйца
- хлеб

(Обратите внимание, что после `-` или `*` нужно ставить пробел).

Вы можете создавать нумерованные списки, используя `#` вместо `-` или `*`:

# Купить продукт
# Расширить продукт
# Продать товар с большой прибылью

Нумерованные списки также можно начинать с `1.` или `1)`.
Если вы используете число, отличное от `1`, список будет начинаться с этого числа.
Например:

```
200) OK
201) Создан
202) Принято
```

дает следующее:

200) OK
201) Создан
202) Принято

Вы также можете вложить списки:

```
- Тело
  - Голова
  - Рука
    - Локтевой сустав
    - Кисть
      # Большой палец
      # Указательный
      # Средний палец 
      # Безымянный палец
      # Мизинец
  - Нога
    - Колено
    - Стопа
```

...который производит:

- Тело
  - Голова
  - Рука
    - Локтевой сустав
    - Кисть
      # Большой палец
      # Указательный
      # Средний палец 
      # Безымянный палец
      # Мизинец
  - Нога
    - Колено
    - Стопа

При желании вы можете делать отступы в списках, используя несколько символов, чтобы показать глубину отступа, например, так:

```
- Дерево
--- Ветка
--- Лист
```

При этом формируется следующий список:

- Дерево
--- Ветка
--- Лист

Вы можете добавить флажки к элементам, предваряя их символами `[ ]` или `[X]`, как показано ниже:

```
- [X] Разогрейте духовку до 450 градусов.
- [ ] Натрите цедрой 35 лимонов.
```

Это создает следующий список флажков:

- [X] Разогрейте духовку до 450 градусов.
- [ ] Натрите цедрой 35 лимонов.

Сделайте **блоки кода**, отступив два пробела:

  f(x, y);

Вы также можете использовать три обратных знака, чтобы заключить блок кода в рамку:

```
f(x, y);
g(f);
```

Вы можете указать язык для подсветки синтаксиса с помощью `lang=xxx`:
  lang=text
  lang=html
  <a href="#">...</a>

Следующий код выделит блок с помощью подсветки для данного языка, если таковая имеется:
  lang=html
  <a href="#">...</a>

Вы также можете использовать заголовок `COUNTEREXAMPLE`, чтобы показать, что блок кода является
плохой и не должен быть скопирован:
  lang=text
  COUNTEREXAMPLE
  function f() {
     global $$variable_variable;
  }

В результате получается блок, подобный этому:

  COUNTEREXAMPLE
  function f() {
     global $$variable_variable;
  }

Вы можете использовать `lines=N`, чтобы ограничить вертикальный размер фрагмента кода, и
`name=some_name.ext`, чтобы дать ему имя.
Например, вот так:

  lang=text
  lang=html, name=Пример, lines=4, counterexample
  <p>Яблоко</p>
  <p>Абрикос</p>
  <p>Авокадо</p>
  <p>Банана</p>
  <p>Черника</p>
  <p>Виноград</p>

В результате будет получено следующее:

  lang=html, name=Пример, lines=4, counterexample
  <p>Яблоко</p>
  <p>Абрикос</p>
  <p>Авокадо</p>
  <p>Банана</p>
  <p>Черника</p>
  <p>Виноград</p>


Вы можете использовать элементы `NOTE:`, `WARNING:` или `IMPORTANT:`, чтобы обратить внимание на важную идею.

Например, напишите следующее:

```
NOTE: Проводите регулярные собрания, чтобы ваши сотрудники не спали.
```

...чтобы произвести это:

NOTE: Проводите регулярные собрания, чтобы ваши сотрудники не спали.

Использование `WARNING:` или `IMPORTANT:` в начале строки изменяет
цвет вызова:

WARNING: Слишком большое количество встреч может вызвать сонливость

IMPORTANT: Не посещайте слишком много собраний.

Кроме того, вы можете использовать `(NOTE)`, `(WARNING)` или `(IMPORTANT)` для получения тот же эффект,
но без появления `(NOTE)`, `(WARNING)`, или `(IMPORTANT)` в отображаемом результате.
Например, в этом призыве используется `(NOTE)`:

(NOTE) Не посещайте слишком мало встреч.


Горизонтальные линии
========

Вы можете разделить разделы, поставив три или более тире на одной линии. сами по себе.
Это создает разделитель или горизонтальное правило, похожее на тег `<hr />`. тег, например, как здесь:

---

Тире должно располагаться на отдельной строке и быть отделено от другого контента. Например, вот так:

```
Этот раздел будет визуально отделен.

---

По совершенно другой теме, ...
```


= Связывание URIs =

URI автоматически связываются: http://phabricator.org/.

Если у вас есть URI с проблемными символами, например, ``http://comma.org/,``, вы можете окружить его угловыми скобками:
```
<http://comma.org/,>
```

Это заставит синтаксический анализатор использовать весь URI: <http://comma.org/,>

Вы также можете использовать создание именованных ссылок, в которых вы выбираете отображаемый текст. Эти
работают в Интернете в целом:
```
[[http://www.boring-legal-documents.com/ | захватывающие юридические документы]]
```

Также поддерживаются ссылки в стиле маркдауна:
```
[Toil](http://www.trouble.com)
```

= Ссылки на объекты =

Вы можете ссылаться на объекты Phabricator, такие как задачи Maniphest, указывая имя объекта:
```
T123 # Ссылка на задачу Maniphest T123
```

= Встраивание объектов

Вы также можете создавать ссылки на полное имя некоторых объектов, используя скобки:
```
{T123}        # Ссылка на задачу Maniphest T123 с полным именем
```

Эти ссылки также будут отображаться при изменении состояния объекта (например, при закрытии задания или ревизии).
задача или ревизия закрывается). Некоторые типы объектов поддерживают богатое встраивание.

== Ссылки на метки проектов

На проекты можно ссылаться с помощью хэштега `#`. По умолчанию это работает используя название проекта (в нижнем регистре, с подчеркиванием). Кроме того, вы можете установить несколько дополнительных хэштегов, отредактировав детали проекта в Phabricator.
```
#qa, #quality_assurance
```

== Встраивание изображений

Вы можете вставить изображение или другой файл, используя скобки для ссылки на него:
```
{F123}
```

В большинстве интерфейсов вы можете перетащить изображение с вашего компьютера в текстовую область, чтобы загрузить и сослаться на него.

Большинство браузеров также поддерживают загрузку данных изображения, просто вставив их из буфера обмена в текстовую область.

Параметры отображения файлов можно задать следующим образом:
```
{F123, layout=left, float, size=full, alt="утёнок"}
```

Для всех файлов допустимыми параметрами являются:

- **разметка**
  - left : Размещает изображение слева (по умолчанию)
  - center : Размещает изображение горизонтально по центру
  - right : Размещает изображение справа
  - inline : Размещает изображение слева, но ближе к предыдущей и следующей строке.
  - link : отображает ссылку вместо самого изображения
- **name** : Когда `layout` установлен на `link`, или для неизображений, это имя используется в качестве текста ссылки.
- **alt** Предоставляет альтернативный текст для вспомогательных технологий.

Файлы изображений поддерживают эти параметры:

- **float** Если для макета установлено значение left или right, изображение будет плавающим, так что текст будет обернут вокруг него.
- **size** большой палец (по умолчанию), полный
- **width** Масштабирование изображения по ширине.
- **height** Масштабировать изображение по высоте.

Аудио- и видеофайлы поддерживают эти параметры:

- **media**: Укажите тип медиафайла как `аудио` или `видео`. Это позволяет определить, как должен быть отрендерен файл, который может содержать либо аудио, либо видео.
- **loop**: Зацикливать этот медиафайл.
- **autoplay**: Автоматически начать воспроизведение этого медиафайла.

= Цитирование текста =

Чтобы процитировать текст, предварите его знаком `>`:
```
  > Это цитируемый текст.
```

Это представлено следующим образом:

> This is quoted text.

= Memes =

You can also use image macros in the context of memes. For example, if you
have an image macro named `grumpy`, you can create a meme by doing the
following:
```
{meme, src=grumpy, above=текст-сверху, below=текст-снизу}
```

= Упоминание пользователей

В Maniphest вы можете упомянуть другого пользователя, написав:
```
@username
```

Иконки
======

Вы можете добавлять иконки в комментарии, используя синтаксис `{icon ...}`. Например:
```
  {icon camera}
```

Это отображает: {icon camera}

Вы можете выбрать цвет для значков:
```
  {icon camera color=blue}
```

Это отображает: {icon camera color=blue}

Список доступных иконок можно найти на сайте [[ https://fontawesome.com/v4.7.0/icons/ | FontAwesome]].
Доступны следующие цвета:
  - dark              {icon phabrico-square, color=dark}
  - bluegrey          {icon phabrico-square, color=bluegrey}
  - white             {icon phabrico-square, color=white}
  - red               {icon phabrico-square, color=red}
  - orange            {icon phabrico-square, color=orange}
  - yellow            {icon phabrico-square, color=yellow}
  - green             {icon phabrico-square, color=green}
  - blue              {icon phabrico-square, color=blue}
  - sky               {icon phabrico-square, color=sky}
  - indigo            {icon phabrico-square, color=indigo}
  - pink              {icon phabrico-square, color=pink}
  - fire              {icon phabrico-square, color=fire}
  - violet            {icon phabrico-square, color=violet}
  - lightbluetext     {icon phabrico-square, color=lightbluetext}
  - lightgreytext     {icon phabrico-square, color=lightgreytext}
  - grey              {icon phabrico-square, color=grey}

Вы можете добавить `spin`, чтобы заставить иконку вращаться:
```
  {icon cog spin}
```

Это отображает: {icon cog spin}


= Вики-документы

Вы можете ссылаться на документы Вики с помощью их пути:
```
  Убедитесь, что вы подписали и поставили дату на вашем [[ legal/Letter of Marque and Reprisal]]!
```

По умолчанию ссылка будет отображаться с заголовком документа в качестве имени ссылки.
С помощью трубы (`|`) вы можете изменить название ссылки. Используйте это, чтобы ввести в заблуждение ваших  оппонентов:
```
  Посмотрите на эти [[legal/boring_documents/ | захватывающие юридические документы]]!
```

Если вы начинаете путь к ссылке с `./` или `../`, оставшаяся часть пути будет оцениваться относительно текущей страницы вики.
Например, если вы пишете содержимое для документа `fruit/`, то ссылка на `[[./guava]]` будет такой же, как ссылка на `[[fruit/guava]]` из другого места.

Относительные ссылки могут использовать `../` для перехода вверх по дереву документа.
 От страницы `produce/vegetables/`, вы можете использовать `[[../fruit/guava]]` для ссылки на страницу страницу `produce/fruit/guava`.

Относительные ссылки не работают при использовании вне вики-страниц.
Например, вы не можете использовать относительную ссылку в комментарии к задаче, потому что не существует разумного места, откуда бы ссылка начала разрешаться.

При перемещении документов относительные ссылки не обновляются автоматически:
они сохраняются в текущем виде. После перемещения документа вам может потребуется просмотреть и скорректировать все содержащиеся в нем относительные ссылки.


= Буквальные блоки =

Чтобы поместить текст в литеральный блок, используйте `%%%`:
```
%%%Текст, который не будет обрабатываться remarkup
[[http://www.example.com | пример]]
%%%
```

Remarkup не будет обрабатывать текст внутри литеральных блоков (кроме как для экранирования HTML и сохранения переносов строк).

= Таблицы =

Remarkup поддерживает простой синтаксис таблиц. Например, это:

```
| Фрукты | Цвет    | Цена    | Кожура?
| ------ | -----   | -----   | -----
| Яблоко | красное | `$0.93` | нет
| Банан  | желтый  | `$0.19` | **ДА**
```

...выдает следующее:

| Фрукты | Цвет    | Цена    | Кожура?
| ------ | -----   | -----   | -----
| Яблоко | красное | `$0.93` | нет
| Банан  | желтый  | `$0.19` | **ДА**

Remarkup также поддерживает упрощенный синтаксис HTML-таблиц. Например, это:

```
<table>
    <tr>
        <th>Фрукты</th>
        <th>Цвет</th>
        <th>Цена</th>
        <th>Кожура?</th>
    </tr>
    <tr>
        <td>Яблоко</td>
        <td>красное</td>
        <td>`$0.93`</td>
        <td>нет</td>
    </tr>
    <tr>
        <td>Банан</td>
        <td>желтый</td>
        <td>`$0.19`</td>
        <td>**ДА**</td>
    </tr>
</table>
```

В результате будет получено следующее:

<table>
    <tr>
        <th>Фрукты</th>
        <th>Цвет</th>
        <th>Цена</th>
        <th>Кожура?</th>
    </tr>
    <tr>
        <td>Яблоко</td>
        <td>красное</td>
        <td>`$0.93`</td>
        <td>нет</td>
    </tr>
    <tr>
        <td>Банан</td>
        <td>желтый</td>
        <td>`$0.19`</td>
        <td>**ДА**</td>
    </tr>
</table>

Некоторые общие замечания по поводу этого синтаксиса:

- все ваши теги должны быть правильно сбалансированы;
- ваши теги НЕ должны включать атрибуты (`<td>` - нормально, `<td style="...">` - нет);
  - вы можете использовать другие правила Ремаркапа (например, **жирный**, //италический// и т.д.) внутри ячеек таблицы.

Навигационные последовательности
====================

Вы можете использовать `{nav ...}` для отображения стилизованной навигационной последовательности, когда помогаете кому-то найти что-то. Это может быть полезно при написании документации.
Например, вы можете дать кому-то указания по покупке лимонов:

{nav icon=home, name=Дом >
Продуктовый магазин >
Продуктовый отдел >
icon=lemon-o, name=Лимоны}

Чтобы отобразить этот пример, используйте следующую разметку:

```
{nav icon=home, name=Дом >
Продуктовый магазин >
Раздел продуктов >
icon=lemon-o, name=Лимоны}
```

В общем случае:

  - Разделяйте разделы с помощью `>`.
  - Каждая секция может иметь просто имя для добавления элемента в навигационную или список пар ключ-значение.
  - Поддерживаются следующие ключи: `icon`, `name`, `type` и `href`.
  - Параметр `type` может быть установлен в `instructions`, чтобы указать, что элемент просит пользователя
    сделать выбор или следовать определенным инструкциям.

Нажатия клавиш
==========

Вы можете использовать `{key ...}` для отображения стилизованного нажатия клавиш. Например, так:

```
Нажмите {key M} для просмотра карты старта.
```

...отображает следующее:

> Нажмите {key M} для просмотра карты звездного неба.

Вы также можете отрисовывать последовательности с помощью клавиш-модификаторов. Это:

```
Используйте {key command option shift 3}, чтобы сделать скриншот.
Нажмите {key down down-right right LP}, чтобы активировать технику хадокена.
```

...выглядит следующим образом:

> Используйте {key command option shift 3}, чтобы сделать скриншот.
> Нажмите {key down down-right right LP}, чтобы активировать технику хадокена.
