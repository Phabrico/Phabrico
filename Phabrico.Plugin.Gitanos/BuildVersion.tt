<# /* This T4 script will generate a BuildVersion.cs file.
      This BuildVersion.cs file contains:
      - the auto-generated version number of this application
      - the UTC build timestamp
      - the MD5sum value of the whole project source directory

      The version number is calculated based on the modification time of the last modified file and is formatted in this way that it
      follows the rules described at https://docs.microsoft.com/en-us/windows/win32/msi/productversion
      An MD5 sum is calculated over all the files and is stored as a comment in the generated BuildVersion.cs file.
      If the calculated MD5 sum is the same as the previously generated MD5 sum, no new version number will be calculated
      The UTC build timestamp will however be updated each time the project is compiled.
   */ 
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Security.Cryptography" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>

<#
    // read previously generated BuildVersion.cs first and get MD5 sum ofdirectory
    string originalMD5sum = "";
    string originalBuildVersionContent = "";
    try
    {
        originalBuildVersionContent = System.IO.File.ReadAllText(this.Host.ResolvePath("") + "\\BuildVersion.cs");
        Match matchOriginalMD5 = Regex.Match(originalBuildVersionContent, "MD5 of project directory is [<]([^>]+)[>]");
        if (matchOriginalMD5.Success)
        {
            originalMD5sum = matchOriginalMD5.Groups[1].Value;
        }
    }
    catch
    {
    }

    // collect all file names from which we can calculate a new version number
    var allProjectFiles = new System.IO.DirectoryInfo(this.Host.ResolvePath(""))
                                        .EnumerateFiles("*.*", System.IO.SearchOption.AllDirectories)
                                        .Where(file => file.Name.Equals("BuildVersion.tt", StringComparison.OrdinalIgnoreCase) == false &&
                                                       file.Name.Equals("BuildVersion.cs", StringComparison.OrdinalIgnoreCase) == false &&
                                                       file.Extension.ToLower().Contains(".suo") == false &&
                                                       file.Extension.ToLower().Contains(".lock") == false &&
                                                       file.Extension.ToLower().StartsWith(".ide") == false &&
                                                       file.FullName.Contains("\\obj\\") == false &&
                                                       file.FullName.Contains("\\bin\\") == false
                                                )
                                        .OrderByDescending(file => file.LastWriteTimeUtc);

    // calculate for each source file an MD5 sum
    var md5AllProjectFiles = allProjectFiles.OrderBy(fileInfo => fileInfo.FullName)
                                            .SelectMany(fileInfo => {
                                                using (var md5 = MD5.Create())
                                                {
                                                    using (var stream = System.IO.File.OpenRead(fileInfo.FullName))
                                                    {
                                                        return md5.ComputeHash(stream);
                                                    }
                                                }
                                            })
                                            .OfType<byte>()
                                            .ToArray();

    // concatenate all files' MD5 sums and calculate a new total MD5 sum (which will be used to see if the project directory content has been changed)
    string md5sum;
    using (var md5 = MD5.Create())
    {
        md5sum = BitConverter.ToString(md5.ComputeHash(md5AllProjectFiles)).Replace("-", "");
    }

    // compare newly calculated MD5 sum with the previously calculated one
    if (md5sum != originalMD5sum)
    {
        // MD5's are different => generate new version number
        DateTime lastWriteTimeUtc = allProjectFiles.First().LastWriteTimeUtc;
        var version = string.Format("{0}.{1}.{2}.{3}", 
                                    lastWriteTimeUtc.Year - 2000,
                                    (lastWriteTimeUtc.Month * 100 + lastWriteTimeUtc.Day) / 5,
                                    ((lastWriteTimeUtc.Month * 100 + lastWriteTimeUtc.Day) % 5) * 10000 
                                       + (lastWriteTimeUtc.Hour * 1000 + lastWriteTimeUtc.Minute * 10 + lastWriteTimeUtc.Second / 10) / 3,
                                    lastWriteTimeUtc.Minute * 100 + lastWriteTimeUtc.Second);

        Write("using System;\r\n");
        Write("using System.Reflection;\r\n\r\n");

        Write("// AssemblyFileVersion and AssemblyVersion are based on the last UTC write time of the source file which was last modified\r\n");
        Write("// Last modified file is " + allProjectFiles.First().FullName + "\r\n");
        Write("// MD5 of project directory is <" + md5sum + ">\r\n");
        Write("\r\n");
        Write("[assembly: AssemblyVersion(\"" + version + "\")]\r\n");
        Write("[assembly: AssemblyFileVersion(\"" + version + "\")]\r\n");
        Write("\r\n");
        Write("namespace Phabrico\r\n");
        Write("{\r\n");
        Write("    /// <summary>\r\n");
        Write("    /// Represents the application version information\r\n");
        Write("    /// </summary>\r\n");
        Write("    public static partial class VersionInfo\r\n");
        Write("    {\r\n");
        Write("        /// <summary>\r\n");
        Write("        /// Returns the timestamp that the application was built\r\n");
        Write("        /// </summary>\r\n");
        Write("        public static DateTime BuildDateTimeUtc\r\n");
        Write("        {\r\n");
        Write("            get\r\n");
        Write("            {\r\n");
        Write("                return new DateTime(" + DateTime.UtcNow.Ticks.ToString() + "L, DateTimeKind.Utc);\r\n");
        Write("            }\r\n");
        Write("        }\r\n");
        Write("\r\n");
        Write("        /// <summary>\r\n");
        Write("        /// Returns the application's version number\r\n");
        Write("        /// </summary>\r\n");
        Write("        public static string Version\r\n");
        Write("        {\r\n");
        Write("            get\r\n");
        Write("            {\r\n");
        Write("                return \"" + version + "\";\r\n");
        Write("            }\r\n");
        Write("        }\r\n");
        Write("    }\r\n");
        Write("}\r\n");
    }
    else
    {
        // MD5's are the same => keep original BuildVersion.cs content but change the DateTime value of the BuildDateTimeUtc property
        string newBuildVersionContent = Regex.Replace(originalBuildVersionContent, 
                                                      "return new DateTime[(][0-9]+L, DateTimeKind[.]Utc[)];", 
                                                      "return new DateTime(" + DateTime.UtcNow.Ticks.ToString() + "L, DateTimeKind.Utc);");

        Write(newBuildVersionContent);
    }
#>