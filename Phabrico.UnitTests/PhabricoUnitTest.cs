using Newtonsoft.Json;
using Phabrico.Miscellaneous;
using System;
using System.IO;
using System.Linq;

namespace Phabrico.UnitTests
{
    public class PhabricoUnitTest : IDisposable
    {
        public Storage.Database Database;
        public Http.Server HttpServer;
        public Miscellaneous.HttpListenerContext HttpListenerContext;
        public string EncryptionKey = "p%9#kpdw:,dp%k/+%hs3/<spp%-|//e;";
        public static string Username = "johnny";
        public static string Password = "My-Secret-Password-0123456789";
        public static string PrivateEncryptionKey = "`nrr%8.r|wjc1s;4+#jitt/=*f2w1ru9";
        public Http.SessionManager.Token Token;
        public Phabricator.Data.User userWhoAmI;
        public Phabricator.Data.Account accountWhoAmI;
        public UInt64[] PublicXorCipher = new UInt64[] { 1, 2, 3, 4 };
        public UInt64[] PrivateXorCipher = new UInt64[] { 5, 6, 7, 8 };

        public PhabricoUnitTest()
        {
            if (System.IO.File.Exists("Phabrico.translation"))
            {
                System.IO.File.Delete("Phabrico.translation");
            }
        }

        protected string ExecuteCMD(string directory, string cmd)
        {
            using (System.Diagnostics.Process process = new System.Diagnostics.Process())
            {
                System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                startInfo.FileName = Environment.SystemDirectory + "\\cmd.exe";
                startInfo.Arguments = "/C CD \"" + directory + "\""
                                    + " & " + cmd
                                    + " & exit"
                                    ;
                process.StartInfo = startInfo;
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.RedirectStandardOutput = true;
                process.Start();
                string output = process.StandardOutput.ReadToEnd();
                process.WaitForExit();

                return output;
            }
        }

        protected virtual void Initialize(string httpRootPath = "")
        {
            // make sure httpRootPath is set in the correct format
            httpRootPath = ("/" + httpRootPath).TrimEnd('/') + "/";

            // set local database filename
            Storage.Database.DataSource = ".\\TestRemarkupEngine";

            // delete old database file if it exists
            if (System.IO.File.Exists(Storage.Database.DataSource))
            {
                System.IO.File.Delete(Storage.Database.DataSource);
            }

            // create database and HTTP server settings
            Storage.Database._dbVersionInDataFile = 0;
            Database = new Storage.Database(EncryptionKey);
            Database.PrivateEncryptionKey = PrivateEncryptionKey;
            HttpServer = new Http.Server(false, 13468, httpRootPath);
            HttpListenerContext = new Miscellaneous.HttpListenerContext();

            // initialize database with test content
            Storage.Account accountStorage = new Storage.Account();
            Storage.File fileStorage = new Storage.File();
            Storage.Maniphest maniphestStorage = new Storage.Maniphest();
            Storage.ManiphestPriority maniphestPriorityStorage = new Storage.ManiphestPriority();
            Storage.ManiphestStatus maniphestStatusStorage = new Storage.ManiphestStatus();
            Storage.PhamePost phameStorage = new Storage.PhamePost();
            Storage.Phriction phrictionStorage = new Storage.Phriction();
            Storage.Project projectStorage = new Storage.Project();
            Storage.Transaction transactionStorage = new Storage.Transaction();
            Storage.User userStorage = new Storage.User();

            userWhoAmI = new Phabricator.Data.User();
            userWhoAmI.DateSynchronized = DateTimeOffset.MinValue;
            userWhoAmI.RealName = "Johnny Birddog";
            userWhoAmI.UserName = Username;
            userWhoAmI.Selected = true;
            userWhoAmI.Token = "PHID-USER-e807f1fcf82d132f9bb0";
            userStorage.Add(Database, userWhoAmI);

            Phabricator.Data.User secondaryUser = new Phabricator.Data.User();
            secondaryUser.DateSynchronized = DateTimeOffset.MinValue;
            secondaryUser.RealName = "Suzy Little";
            secondaryUser.UserName = "suzy";
            secondaryUser.Selected = true;
            secondaryUser.Token = "PHID-USER-a451e1dad99e151a0ca1";
            userStorage.Add(Database, secondaryUser);

            accountWhoAmI = new Phabricator.Data.Account();
            accountWhoAmI.ConduitAPIToken = "api-sat642eqloqv72ecax9qfkf54e61";
            accountWhoAmI.PhabricatorUrl = "http://127.0.0.2:46975";
            accountWhoAmI.Theme = "light";
            accountWhoAmI.Parameters.AutoLogOutAfterMinutesOfInactivity = 0;
            accountWhoAmI.Parameters.ColumnHeadersToHide = new string[0];
            accountWhoAmI.Parameters.DarkenBrightImages = Phabricator.Data.Account.DarkenImageStyle.Disabled;
            accountWhoAmI.Parameters.LastSynchronizationTimestamp = DateTimeOffset.MinValue;
            accountWhoAmI.Parameters.Synchronization = Phabricator.Data.Account.SynchronizationMethod.All;
            accountWhoAmI.Parameters.ClipboardCopyForCodeBlock = true;
            accountWhoAmI.Parameters.UserToken = userWhoAmI.Token;
            accountWhoAmI.Token = "a'=jm+ul#`~9'&mb;\" ;k,dqkowxo4,5";
            accountWhoAmI.PublicXorCipher = PublicXorCipher;
            accountWhoAmI.PrivateXorCipher = PrivateXorCipher;
            accountWhoAmI.UserName = userWhoAmI.UserName;
            accountStorage.Add(Database, accountWhoAmI);

            Token = HttpServer.Session.CreateToken(accountWhoAmI.Token, null);
            Token.EncryptionKey = Encryption.XorString(EncryptionKey, PublicXorCipher);

            Phabricator.Data.Project project = new Phabricator.Data.Project();
            project.DateSynchronized = DateTimeOffset.MinValue;
            project.InternalName = "myproject";
            project.Name = "Johnny was a joker";
            project.Selected = Phabricator.Data.Project.Selection.Selected;
            project.Token = "PHID-PROJ-life";
            projectStorage.Add(Database, project);

            project = new Phabricator.Data.Project();
            project.DateSynchronized = DateTimeOffset.MinValue;
            project.InternalName = "myproject2";
            project.Name = "Classic";
            project.Selected = Phabricator.Data.Project.Selection.Selected;
            project.Token = "PHID-PROJ-classic";
            projectStorage.Add(Database, project);

            project = new Phabricator.Data.Project();
            project.DateSynchronized = DateTimeOffset.MinValue;
            project.InternalName = "myproject3";
            project.Name = "Music";
            project.Selected = Phabricator.Data.Project.Selection.Selected;
            project.Token = "PHID-PROJ-music";
            projectStorage.Add(Database, project);

            Phabricator.Data.Phriction myPhrictionDocument = new Phabricator.Data.Phriction();
            myPhrictionDocument.Author = userWhoAmI.Token;
            myPhrictionDocument.Content = "Once upon a time, I was reading this story over and over again";
            myPhrictionDocument.DateModified = DateTimeOffset.Now;
            myPhrictionDocument.Name = "Story of my life";
            myPhrictionDocument.Path = "/";
            myPhrictionDocument.Projects = project.Token;
            myPhrictionDocument.Subscribers = userWhoAmI.Token + "," + project.Token;
            myPhrictionDocument.Token = "PHID-WIKI-MYSTORY";
            phrictionStorage.Add(Database, myPhrictionDocument);

            Phabricator.Data.PhamePost myPhamePost = new Phabricator.Data.PhamePost();
            myPhamePost.Author = userWhoAmI.Token;
            myPhamePost.Blog = "My Blog";
            myPhamePost.Content = "All the things I want to bother you with today...";
            myPhamePost.DateModified = DateTimeOffset.Now;
            myPhamePost.ID = "123";
            myPhamePost.Title = "Listen to me";
            myPhamePost.Token = "PHID-POST-ITSREALLYIMPORTANT";
            phameStorage.Add(Database, myPhamePost);

            Phabricator.Data.Phriction daddysPhrictionDocument = new Phabricator.Data.Phriction();
            daddysPhrictionDocument.Author = userWhoAmI.Token;
            daddysPhrictionDocument.Content = "Once upon a time, I was reading my dad's story over and over again";
            daddysPhrictionDocument.DateModified = DateTimeOffset.Now;
            daddysPhrictionDocument.Name = "Story of my dad's life";
            daddysPhrictionDocument.Path = "daddy/";
            daddysPhrictionDocument.Projects = project.Token;
            daddysPhrictionDocument.Subscribers = userWhoAmI.Token + "," + project.Token;
            daddysPhrictionDocument.Token = "PHID-WIKI-DADSSTORY";
            phrictionStorage.Add(Database, daddysPhrictionDocument);
            Database.DescendTokenFrom(myPhrictionDocument.Token, daddysPhrictionDocument.Token);

            Phabricator.Data.Phriction grandaddysPhrictionDocument = new Phabricator.Data.Phriction();
            grandaddysPhrictionDocument.Author = userWhoAmI.Token;
            grandaddysPhrictionDocument.Content = "Once upon a time, I was reading my grandfather's story over and over again";
            grandaddysPhrictionDocument.DateModified = DateTimeOffset.Now;
            grandaddysPhrictionDocument.Name = "Story of my grandfather's life";
            grandaddysPhrictionDocument.Path = "daddy/grandaddy/";
            grandaddysPhrictionDocument.Projects = project.Token;
            grandaddysPhrictionDocument.Subscribers = userWhoAmI.Token + "," + project.Token;
            grandaddysPhrictionDocument.Token = "PHID-WIKI-GRANDADDYSSTORY";
            phrictionStorage.Add(Database, grandaddysPhrictionDocument);
            Database.DescendTokenFrom(daddysPhrictionDocument.Token, grandaddysPhrictionDocument.Token);

            Phabricator.Data.Phriction diagramPhrictionDocument = new Phabricator.Data.Phriction();
            diagramPhrictionDocument.Author = userWhoAmI.Token;
            diagramPhrictionDocument.Content = "This is a diagram: {F1235}";
            diagramPhrictionDocument.DateModified = DateTimeOffset.Now;
            diagramPhrictionDocument.Name = "Diagrams";
            diagramPhrictionDocument.Path = "daddy/diagram/";
            diagramPhrictionDocument.Projects = project.Token;
            diagramPhrictionDocument.Subscribers = userWhoAmI.Token + "," + project.Token;
            diagramPhrictionDocument.Token = "PHID-WIKI-DIAGRAMDOCUMENT";
            phrictionStorage.Add(Database, diagramPhrictionDocument);
            Database.DescendTokenFrom(daddysPhrictionDocument.Token, diagramPhrictionDocument.Token);

            Phabricator.Data.ManiphestPriority maniphestPriority = new Phabricator.Data.ManiphestPriority();
            maniphestPriority.Name = "High";
            maniphestPriority.Priority = 80;
            maniphestPriorityStorage.Add(Database, maniphestPriority);
            maniphestPriority.Name = "Unbreak Now";
            maniphestPriority.Priority = 100;
            maniphestPriorityStorage.Add(Database, maniphestPriority);

            Phabricator.Data.ManiphestStatus maniphestStatus = new Phabricator.Data.ManiphestStatus();
            maniphestStatus.Name = "Open";
            maniphestStatus.Value = "open";
            maniphestStatusStorage.Add(Database, maniphestStatus);

            Phabricator.Data.Maniphest maniphestTask = new Phabricator.Data.Maniphest();
            maniphestTask.ID = "1247";
            maniphestTask.Token = "PHID-TASK-PIXIES";
            maniphestTask.Name = "Mind searching";
            maniphestTask.Description = "# Put your feet in the air\n# Put your head on the ground\n# Spin it";
            maniphestTask.Author = userWhoAmI.Token;
            maniphestTask.DateModified = DateTimeOffset.Now;
            maniphestTask.IsOpen = true;
            maniphestTask.IsOpen = true;
            maniphestTask.Owner = userWhoAmI.Token;
            maniphestTask.Priority = "80";
            maniphestTask.Projects = "";
            maniphestTask.Status = "open";
            maniphestTask.Subscribers = "";
            maniphestTask.Transactions = new Phabricator.Data.Transaction[] {
                new Phabricator.Data.Transaction {
                    Author = userWhoAmI.Token,
                    DateModified = DateTimeOffset.Now,
                    ID = "150175",
                    IsStaged = false,
                    NewValue = userWhoAmI.Token,
                    OldValue = "",
                    Token = maniphestTask.Token,
                    Type = "owner"
                },
                new Phabricator.Data.Transaction {
                    Author = userWhoAmI.Token,
                    DateModified = DateTimeOffset.Now,
                    ID = "150176",
                    IsStaged = false,
                    NewValue = maniphestTask.Priority,
                    OldValue = "",
                    Token = maniphestTask.Token,
                    Type = "priority"
                },
            };
            maniphestStorage.Add(Database, maniphestTask);
            foreach (var transaction in maniphestTask.Transactions)
            {
                transactionStorage.Add(Database, transaction);
            }


            maniphestTask = new Phabricator.Data.Maniphest();
            maniphestTask.ID = "2145";
            maniphestTask.Token = "PHID-TASK-DEEPPURPLE";
            maniphestTask.Name = "Play the intro of Child In Time";
            maniphestTask.Description = "G2 G2 A2";
            maniphestTask.Author = userWhoAmI.Token;
            maniphestTask.DateModified = DateTimeOffset.Now;
            maniphestTask.IsOpen = true;
            maniphestTask.Owner = userWhoAmI.Token;
            maniphestTask.Priority = "80";
            maniphestTask.Projects = "PHID-PROJ-music";
            maniphestTask.Status = "open";
            maniphestTask.Subscribers = "";
            maniphestTask.Transactions = new Phabricator.Data.Transaction[] {
                new Phabricator.Data.Transaction {
                    Author = userWhoAmI.Token,
                    DateModified = DateTimeOffset.Now,
                    ID = "150185",
                    IsStaged = false,
                    NewValue = userWhoAmI.Token,
                    OldValue = "",
                    Token = maniphestTask.Token,
                    Type = "owner"
                },
                new Phabricator.Data.Transaction {
                    Author = userWhoAmI.Token,
                    DateModified = DateTimeOffset.Now,
                    ID = "150186",
                    IsStaged = false,
                    NewValue = maniphestTask.Priority,
                    OldValue = "",
                    Token = maniphestTask.Token,
                    Type = "priority"
                },
            };
            maniphestStorage.Add(Database, maniphestTask);
            foreach (var transaction in maniphestTask.Transactions)
            {
                transactionStorage.Add(Database, transaction);
            }

            Phabricator.Data.Transaction comment = new Phabricator.Data.Transaction();
            comment.Author = userWhoAmI.Token;
            comment.DateModified = DateTimeOffset.Now;
            comment.ID = "4521";
            comment.IsStaged = false;
            comment.NewValue = "C3 is preferred, but B3 is also allowed {F1234, size=full}";
            comment.OldValue = "";
            comment.Token = maniphestTask.Token;
            comment.Type = "comment";
            transactionStorage.Add(Database, comment);

            Phabricator.Data.File file1 = new Phabricator.Data.File();
            file1.DateModified = DateTimeOffset.Now;
            file1.FileName = "small.png";
            file1.FileType = Phabricator.Data.File.FileStyle.Image;
            file1.ID = 1234;
            file1.MacroName = "mymacro";
            file1.Token = "PHID-FILE-SMALLPNG";
            file1.Size = 391;
            file1.Data = new byte[] {
                0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
                0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x08, 0x03, 0x00, 0x00, 0x00, 0xD7, 0xA9, 0xCD,
                0xCA, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00,
                0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC, 0x61, 0x05, 0x00, 0x00,
                0x00, 0x42, 0x50, 0x4C, 0x54, 0x45, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x0A, 0x0A, 0x0A, 0x7F,
                0x6A, 0x00, 0xFF, 0xD8, 0x00, 0x10, 0x10, 0x10, 0x09, 0x09, 0x09, 0x1D, 0x1D, 0x1D, 0x11, 0x11,
                0x11, 0x1B, 0x1B, 0x1B, 0x0F, 0x0F, 0x0F, 0x25, 0x25, 0x25, 0x3A, 0x3A, 0x3A, 0x12, 0x12, 0x12,
                0xFF, 0x00, 0x00, 0x14, 0x14, 0x14, 0x03, 0x03, 0x03, 0x02, 0x02, 0x02, 0x05, 0x05, 0x05, 0x06,
                0x06, 0x06, 0x0D, 0x0D, 0x0D, 0x00, 0x00, 0x00, 0x32, 0xB6, 0x87, 0x3F, 0x00, 0x00, 0x00, 0x16,
                0x74, 0x52, 0x4E, 0x53, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0xD2, 0xC0, 0xE4, 0x00, 0x00,
                0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0E, 0xC2, 0x00, 0x00, 0x0E, 0xC2, 0x01, 0x15,
                0x28, 0x4A, 0x80, 0x00, 0x00, 0x00, 0xAC, 0x49, 0x44, 0x41, 0x54, 0x28, 0x53, 0xA5, 0x92, 0xE9,
                0x12, 0x83, 0x20, 0x0C, 0x84, 0x83, 0xDB, 0xFB, 0x40, 0xDB, 0x0E, 0xEF, 0xFF, 0xAA, 0xDD, 0x5C,
                0xA8, 0xCC, 0xF4, 0x57, 0x57, 0x21, 0xB0, 0x1F, 0x31, 0x0A, 0x4A, 0xFB, 0xA1, 0x0E, 0xA4, 0x08,
                0x35, 0xAD, 0xF3, 0x08, 0x82, 0x83, 0x0A, 0x84, 0xE1, 0x78, 0xEF, 0xB6, 0x49, 0x8E, 0x6E, 0x8D,
                0x3E, 0xB3, 0x4E, 0x09, 0x24, 0x9C, 0x14, 0xCE, 0x0E, 0xF6, 0xEB, 0x55, 0x5A, 0x47, 0xEF, 0x98,
                0x6E, 0x34, 0x29, 0xF0, 0x04, 0x44, 0x9A, 0x47, 0xA6, 0xF0, 0xD2, 0xD1, 0x05, 0xB8, 0x6A, 0xBC,
                0xE1, 0xFE, 0x60, 0x40, 0x02, 0x5D, 0x67, 0x4D, 0xC7, 0xBA, 0xA0, 0x67, 0x8C, 0xFA, 0x03, 0xD8,
                0x83, 0x5D, 0x56, 0xC7, 0x80, 0x8E, 0x4A, 0x27, 0x78, 0xB2, 0xB3, 0xD7, 0xF5, 0xD7, 0x4A, 0x82,
                0x52, 0xD9, 0xC7, 0x97, 0x7B, 0xF2, 0x0C, 0x6A, 0x79, 0xD5, 0x5A, 0x73, 0x4B, 0xA2, 0x3C, 0xDE,
                0x22, 0x1F, 0xA1, 0x5F, 0xAB, 0x99, 0x6C, 0xEB, 0x36, 0x9A, 0xBD, 0x01, 0x03, 0xB1, 0x43, 0x74,
                0xC0, 0xA3, 0x75, 0xD6, 0xFD, 0x04, 0x1C, 0xB0, 0x04, 0x7F, 0x86, 0x25, 0x0F, 0xBD, 0x83, 0xBD,
                0x5A, 0xFB, 0x02, 0x35, 0x8B, 0x14, 0xF0, 0xA4, 0xFD, 0x0F, 0x59, 0x00, 0x00, 0x00, 0x00, 0x49,
                0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
            };
            fileStorage.Add(Database, file1);
            Database.AssignToken(maniphestTask.Token, file1.Token, Language.NotApplicable);

            Phabricator.Data.File file2 = new Phabricator.Data.File();
            file2.DateModified = DateTimeOffset.Now;
            file2.FileName = "rectangle.png";
            file2.FileType = Phabricator.Data.File.FileStyle.Image;
            file2.ID = 1235;
            file2.Token = "PHID-FILE-DIAGRAMPNG";
            file2.Size = 391;
            file2.Data = new byte[] {
                0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
                0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x3D, 0x08, 0x06, 0x00, 0x00, 0x00, 0x89, 0x33, 0xC6,
                0x33, 0x00, 0x00, 0x03, 0x7E, 0x74, 0x45, 0x58, 0x74, 0x6D, 0x78, 0x66, 0x69, 0x6C, 0x65, 0x00,
                0x25, 0x33, 0x43, 0x6D, 0x78, 0x66, 0x69, 0x6C, 0x65, 0x25, 0x32, 0x30, 0x68, 0x6F, 0x73, 0x74,
                0x25, 0x33, 0x44, 0x25, 0x32, 0x32, 0x45, 0x6C, 0x65, 0x63, 0x74, 0x72, 0x6F, 0x6E, 0x25, 0x32,
                0x32, 0x25, 0x32, 0x30, 0x6D, 0x6F, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x25, 0x33, 0x44, 0x25,
                0x32, 0x32, 0x32, 0x30, 0x32, 0x32, 0x2D, 0x30, 0x31, 0x2D, 0x32, 0x32, 0x54, 0x31, 0x34, 0x25,
                0x33, 0x41, 0x33, 0x30, 0x25, 0x33, 0x41, 0x31, 0x30, 0x2E, 0x33, 0x37, 0x30, 0x5A, 0x25, 0x32,
                0x32, 0x25, 0x32, 0x30, 0x61, 0x67, 0x65, 0x6E, 0x74, 0x25, 0x33, 0x44, 0x25, 0x32, 0x32, 0x35,
                0x2E, 0x30, 0x25, 0x32, 0x30, 0x28, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x25, 0x32, 0x30,
                0x4E, 0x54, 0x25, 0x32, 0x30, 0x31, 0x30, 0x2E, 0x30, 0x25, 0x33, 0x42, 0x25, 0x32, 0x30, 0x57,
                0x69, 0x6E, 0x36, 0x34, 0x25, 0x33, 0x42, 0x25, 0x32, 0x30, 0x78, 0x36, 0x34, 0x29, 0x25, 0x32,
                0x30, 0x41, 0x70, 0x70, 0x6C, 0x65, 0x57, 0x65, 0x62, 0x4B, 0x69, 0x74, 0x25, 0x32, 0x46, 0x35,
                0x33, 0x37, 0x2E, 0x33, 0x36, 0x25, 0x32, 0x30, 0x28, 0x4B, 0x48, 0x54, 0x4D, 0x4C, 0x25, 0x32,
                0x43, 0x25, 0x32, 0x30, 0x6C, 0x69, 0x6B, 0x65, 0x25, 0x32, 0x30, 0x47, 0x65, 0x63, 0x6B, 0x6F,
                0x29, 0x25, 0x32, 0x30, 0x64, 0x72, 0x61, 0x77, 0x2E, 0x69, 0x6F, 0x25, 0x32, 0x46, 0x31, 0x33,
                0x2E, 0x36, 0x2E, 0x32, 0x25, 0x32, 0x30, 0x43, 0x68, 0x72, 0x6F, 0x6D, 0x65, 0x25, 0x32, 0x46,
                0x38, 0x33, 0x2E, 0x30, 0x2E, 0x34, 0x31, 0x30, 0x33, 0x2E, 0x31, 0x32, 0x32, 0x25, 0x32, 0x30,
                0x45, 0x6C, 0x65, 0x63, 0x74, 0x72, 0x6F, 0x6E, 0x25, 0x32, 0x46, 0x39, 0x2E, 0x32, 0x2E, 0x30,
                0x25, 0x32, 0x30, 0x53, 0x61, 0x66, 0x61, 0x72, 0x69, 0x25, 0x32, 0x46, 0x35, 0x33, 0x37, 0x2E,
                0x33, 0x36, 0x25, 0x32, 0x32, 0x25, 0x32, 0x30, 0x65, 0x74, 0x61, 0x67, 0x25, 0x33, 0x44, 0x25,
                0x32, 0x32, 0x30, 0x65, 0x6F, 0x56, 0x37, 0x6B, 0x62, 0x59, 0x42, 0x48, 0x74, 0x68, 0x71, 0x51,
                0x41, 0x69, 0x79, 0x6C, 0x6E, 0x31, 0x25, 0x32, 0x32, 0x25, 0x32, 0x30, 0x76, 0x65, 0x72, 0x73,
                0x69, 0x6F, 0x6E, 0x25, 0x33, 0x44, 0x25, 0x32, 0x32, 0x31, 0x33, 0x2E, 0x36, 0x2E, 0x32, 0x25,
                0x32, 0x32, 0x25, 0x32, 0x30, 0x74, 0x79, 0x70, 0x65, 0x25, 0x33, 0x44, 0x25, 0x32, 0x32, 0x64,
                0x65, 0x76, 0x69, 0x63, 0x65, 0x25, 0x32, 0x32, 0x25, 0x33, 0x45, 0x25, 0x33, 0x43, 0x64, 0x69,
                0x61, 0x67, 0x72, 0x61, 0x6D, 0x25, 0x32, 0x30, 0x69, 0x64, 0x25, 0x33, 0x44, 0x25, 0x32, 0x32,
                0x75, 0x59, 0x76, 0x66, 0x33, 0x34, 0x66, 0x74, 0x62, 0x73, 0x67, 0x44, 0x52, 0x76, 0x47, 0x76,
                0x6E, 0x63, 0x4E, 0x36, 0x25, 0x32, 0x32, 0x25, 0x32, 0x30, 0x6E, 0x61, 0x6D, 0x65, 0x25, 0x33,
                0x44, 0x25, 0x32, 0x32, 0x50, 0x61, 0x67, 0x65, 0x2D, 0x31, 0x25, 0x32, 0x32, 0x25, 0x33, 0x45,
                0x6A, 0x5A, 0x4A, 0x4E, 0x54, 0x34, 0x51, 0x77, 0x45, 0x49, 0x5A, 0x25, 0x32, 0x46, 0x44, 0x55,
                0x63, 0x54, 0x6F, 0x45, 0x4C, 0x63, 0x34, 0x34, 0x72, 0x6F, 0x58, 0x6F, 0x77, 0x48, 0x6A, 0x4A,
                0x34, 0x62, 0x4F, 0x74, 0x74, 0x57, 0x43, 0x38, 0x56, 0x53, 0x42, 0x50, 0x7A, 0x31, 0x46, 0x70,
                0x6E, 0x79, 0x6B, 0x63, 0x30, 0x6D, 0x48, 0x6F, 0x44, 0x70, 0x4D, 0x31, 0x25, 0x32, 0x46, 0x4D,
                0x32, 0x77, 0x6C, 0x49, 0x56, 0x67, 0x31, 0x50, 0x68, 0x6A, 0x62, 0x69, 0x57, 0x54, 0x4E, 0x51,
                0x51, 0x52, 0x79, 0x79, 0x49, 0x53, 0x41, 0x50, 0x51, 0x52, 0x78, 0x48, 0x4A, 0x45, 0x37, 0x64,
                0x5A, 0x79, 0x4C, 0x6A, 0x54, 0x4F, 0x34, 0x69, 0x42, 0x4E, 0x78, 0x49, 0x68, 0x6B, 0x45, 0x72,
                0x4B, 0x4F, 0x51, 0x50, 0x49, 0x41, 0x79, 0x52, 0x64, 0x70, 0x4A, 0x42, 0x75, 0x77, 0x75, 0x30,
                0x57, 0x69, 0x73, 0x72, 0x6D, 0x7A, 0x30, 0x73, 0x64, 0x56, 0x31, 0x44, 0x61, 0x58, 0x65, 0x4D,
                0x47, 0x71, 0x50, 0x37, 0x66, 0x64, 0x68, 0x5A, 0x71, 0x33, 0x33, 0x58, 0x68, 0x6E, 0x4B, 0x34,
                0x41, 0x45, 0x56, 0x4A, 0x31, 0x53, 0x56, 0x39, 0x6C, 0x38, 0x77, 0x4B, 0x70, 0x47, 0x6C, 0x79,
                0x75, 0x7A, 0x70, 0x4F, 0x49, 0x4C, 0x6E, 0x77, 0x72, 0x61, 0x50, 0x30, 0x4D, 0x48, 0x73, 0x71,
                0x36, 0x71, 0x4E, 0x78, 0x6C, 0x46, 0x5A, 0x51, 0x70, 0x76, 0x73, 0x4E, 0x49, 0x6E, 0x6C, 0x41,
                0x4D, 0x71, 0x4F, 0x31, 0x6E, 0x61, 0x31, 0x71, 0x79, 0x45, 0x42, 0x4E, 0x36, 0x6E, 0x6C, 0x68,
                0x35, 0x72, 0x7A, 0x48, 0x4B, 0x39, 0x37, 0x6C, 0x7A, 0x77, 0x7A, 0x55, 0x39, 0x6A, 0x38, 0x4A,
                0x35, 0x36, 0x4E, 0x52, 0x35, 0x56, 0x64, 0x6D, 0x50, 0x6C, 0x36, 0x53, 0x25, 0x32, 0x46, 0x50,
                0x4E, 0x34, 0x34, 0x6D, 0x39, 0x56, 0x49, 0x6D, 0x36, 0x77, 0x79, 0x6A, 0x64, 0x56, 0x48, 0x55,
                0x37, 0x38, 0x4B, 0x6D, 0x51, 0x37, 0x5A, 0x55, 0x30, 0x76, 0x36, 0x68, 0x37, 0x6A, 0x5A, 0x4B,
                0x55, 0x31, 0x64, 0x34, 0x4C, 0x4D, 0x55, 0x39, 0x6A, 0x52, 0x61, 0x32, 0x4E, 0x30, 0x56, 0x7A,
                0x4F, 0x59, 0x71, 0x6F, 0x63, 0x42, 0x75, 0x65, 0x25, 0x32, 0x42, 0x46, 0x74, 0x46, 0x41, 0x30,
                0x74, 0x4A, 0x79, 0x38, 0x76, 0x64, 0x73, 0x47, 0x78, 0x34, 0x53, 0x74, 0x6C, 0x44, 0x74, 0x46,
                0x7A, 0x73, 0x51, 0x25, 0x32, 0x42, 0x59, 0x43, 0x77, 0x4D, 0x56, 0x77, 0x65, 0x49, 0x46, 0x6C,
                0x6E, 0x63, 0x51, 0x6F, 0x47, 0x75, 0x77, 0x4A, 0x72, 0x52, 0x68, 0x57, 0x42, 0x43, 0x36, 0x70,
                0x63, 0x43, 0x64, 0x34, 0x6B, 0x63, 0x38, 0x4E, 0x78, 0x76, 0x62, 0x73, 0x61, 0x72, 0x4C, 0x54,
                0x61, 0x58, 0x6B, 0x69, 0x4B, 0x6A, 0x75, 0x41, 0x78, 0x38, 0x4B, 0x62, 0x33, 0x4B, 0x35, 0x51,
                0x78, 0x55, 0x7A, 0x42, 0x25, 0x32, 0x46, 0x58, 0x6D, 0x25, 0x32, 0x46, 0x6E, 0x7A, 0x62, 0x52,
                0x61, 0x63, 0x35, 0x4C, 0x38, 0x25, 0x33, 0x44, 0x25, 0x33, 0x43, 0x25, 0x32, 0x46, 0x64, 0x69,
                0x61, 0x67, 0x72, 0x61, 0x6D, 0x25, 0x33, 0x45, 0x25, 0x33, 0x43, 0x25, 0x32, 0x46, 0x6D, 0x78,
                0x66, 0x69, 0x6C, 0x65, 0x25, 0x33, 0x45, 0xD0, 0x0D, 0xAE, 0x45, 0x00, 0x00, 0x04, 0x1D, 0x49,
                0x44, 0x41, 0x54, 0x78, 0x5E, 0xED, 0x98, 0xBD, 0x4B, 0x24, 0x41, 0x10, 0xC5, 0x6B, 0x43, 0x05,
                0x35, 0xD0, 0x4C, 0x10, 0x33, 0xCD, 0x04, 0x53, 0x35, 0xD5, 0x3F, 0xC1, 0x40, 0x8D, 0xCC, 0x54,
                0x04, 0x41, 0x43, 0x3F, 0xD0, 0x50, 0x41, 0x10, 0x0D, 0x0C, 0x8C, 0xD4, 0xC0, 0xC4, 0xDC, 0x58,
                0x05, 0x03, 0x11, 0x0C, 0x4D, 0x44, 0x04, 0x43, 0xC1, 0x40, 0x30, 0xF4, 0x78, 0x8D, 0xBD, 0xD4,
                0xF4, 0xCD, 0xEC, 0xCC, 0x7A, 0xB5, 0x5C, 0xB3, 0xFD, 0x16, 0x0E, 0xEE, 0x66, 0x7B, 0xAA, 0x5F,
                0xBD, 0x5F, 0x57, 0x75, 0xED, 0xD5, 0x44, 0xE4, 0x5B, 0xF8, 0x69, 0x6B, 0x07, 0x6A, 0x80, 0xFC,
                0xFD, 0x4D, 0xCE, 0xED, 0x4A, 0xB9, 0x56, 0xAB, 0x09, 0x21, 0xB7, 0x2B, 0xDD, 0x9F, 0xBC, 0x08,
                0xB9, 0xCD, 0x01, 0x23, 0x3D, 0x42, 0x26, 0xE4, 0x04, 0x1C, 0x48, 0x20, 0x45, 0x56, 0x32, 0x21,
                0x27, 0xE0, 0x40, 0x02, 0x29, 0xB2, 0x92, 0x09, 0x39, 0x01, 0x07, 0x12, 0x48, 0x91, 0x95, 0x4C,
                0xC8, 0x09, 0x38, 0x90, 0x40, 0x8A, 0xAC, 0x64, 0x42, 0x4E, 0xC0, 0x81, 0x04, 0x52, 0x64, 0x25,
                0x13, 0x72, 0x02, 0x0E, 0x24, 0x90, 0x22, 0x2B, 0x99, 0x90, 0x13, 0x70, 0x20, 0x81, 0x14, 0x59,
                0xC9, 0x84, 0x9C, 0x80, 0x03, 0x09, 0xA4, 0xC8, 0x4A, 0x26, 0xE4, 0x04, 0x1C, 0x48, 0x20, 0x45,
                0x56, 0x32, 0x21, 0x27, 0xE0, 0x40, 0x02, 0x29, 0xB2, 0x92, 0x09, 0x39, 0x01, 0x07, 0x12, 0x48,
                0xB1, 0xE9, 0x4A, 0xBE, 0xBD, 0xBD, 0x95, 0xF1, 0xF1, 0xF1, 0x5C, 0x6B, 0x6E, 0x6E, 0x6E, 0xDC,
                0xF3, 0xD3, 0xD3, 0x53, 0xD9, 0xDF, 0xDF, 0x97, 0x8E, 0x8E, 0x8E, 0xFA, 0xBA, 0xAF, 0xAF, 0x2F,
                0x59, 0x59, 0x59, 0x91, 0xB9, 0xB9, 0x39, 0x19, 0x1B, 0x1B, 0x2B, 0xB5, 0xB6, 0xD9, 0xF5, 0xA5,
                0x01, 0x0D, 0x17, 0xBC, 0xBF, 0xBF, 0xCB, 0xD2, 0xD2, 0x92, 0x6C, 0x6D, 0x6D, 0xC9, 0xD0, 0xD0,
                0x90, 0x61, 0x64, 0x91, 0x56, 0xE4, 0xDD, 0x34, 0x64, 0x9D, 0xD1, 0xCE, 0xCE, 0x8E, 0xFB, 0xE7,
                0xFA, 0xFA, 0x7A, 0xFD, 0x31, 0x0E, 0x41, 0x1E, 0x64, 0x53, 0x27, 0xFE, 0x73, 0x30, 0x42, 0xFE,
                0x81, 0xDC, 0xDD, 0xDD, 0x2D, 0xBB, 0xBB, 0xBB, 0x32, 0x35, 0x35, 0x25, 0xE7, 0xE7, 0xE7, 0xD2,
                0xD9, 0xD9, 0x99, 0xA9, 0x64, 0x1C, 0x90, 0x8D, 0x8D, 0x0D, 0x87, 0x6B, 0x7B, 0x7B, 0x3B, 0x73,
                0x50, 0xF0, 0x2C, 0x3C, 0xD1, 0x65, 0xEB, 0xF1, 0x0E, 0xCC, 0x9F, 0x99, 0x99, 0x91, 0xAB, 0xAB,
                0xAB, 0xD2, 0xB8, 0x1F, 0x1F, 0x1F, 0x72, 0x71, 0x71, 0x21, 0xE8, 0x3E, 0xA3, 0xA3, 0xA3, 0x4E,
                0xDB, 0xF1, 0xF1, 0xB1, 0x7B, 0x0F, 0xCF, 0x7C, 0xB7, 0xD1, 0x31, 0x91, 0xCB, 0xC9, 0xC9, 0x89,
                0x40, 0x0B, 0xD6, 0x8E, 0x8C, 0x8C, 0xB8, 0x18, 0x7D, 0x7D, 0x7D, 0xB9, 0xFB, 0x3E, 0x3D, 0x3D,
                0xB9, 0x6A, 0xEF, 0xE9, 0xE9, 0xC9, 0x8D, 0x0D, 0x5F, 0x66, 0x67, 0x67, 0x5D, 0x9C, 0xC9, 0xC9,
                0x49, 0xE9, 0xEA, 0xEA, 0x92, 0xD5, 0xD5, 0xD5, 0x8C, 0x4F, 0x88, 0x31, 0x3D, 0x3D, 0x2D, 0x8F,
                0x8F, 0x8F, 0x75, 0x2F, 0x7B, 0x7B, 0x7B, 0x9B, 0x3A, 0xE6, 0x2D, 0xA9, 0x64, 0xB4, 0x73, 0x6D,
                0x5E, 0x7F, 0x7F, 0x7F, 0x46, 0xBC, 0x6E, 0xE9, 0xF8, 0xFB, 0xE6, 0xE6, 0xA6, 0xCC, 0xCF, 0xCF,
                0x67, 0x5A, 0x9F, 0x86, 0xDC, 0xCC, 0xFA, 0x89, 0x89, 0x09, 0x67, 0x38, 0xCC, 0x59, 0x5E, 0x5E,
                0x96, 0x83, 0x83, 0x83, 0xDC, 0xB8, 0xD0, 0xE4, 0x3B, 0x90, 0xEE, 0x48, 0xE8, 0x44, 0x8B, 0x8B,
                0x8B, 0x0E, 0xDE, 0xC0, 0xC0, 0x40, 0xC6, 0x70, 0x40, 0x79, 0x7E, 0x7E, 0x96, 0x85, 0x85, 0x85,
                0x7A, 0xBB, 0xF6, 0x6B, 0xF2, 0xF6, 0x85, 0x6E, 0x00, 0x5A, 0x5B, 0x5B, 0x73, 0x9A, 0xB0, 0xCF,
                0xDB, 0xDB, 0x9B, 0xBB, 0xCA, 0x5E, 0x5F, 0x5F, 0xEB, 0xFA, 0xFC, 0x21, 0xC1, 0xC1, 0xD2, 0x90,
                0x87, 0x87, 0x87, 0xDD, 0x7B, 0xD0, 0x89, 0xEF, 0xF4, 0xFB, 0xFA, 0x2A, 0x2C, 0x23, 0xDE, 0x12,
                0xC8, 0x10, 0x03, 0x43, 0x70, 0xE2, 0xBC, 0x31, 0x5A, 0x7C, 0xD1, 0xBD, 0xAD, 0xC5, 0x16, 0x41,
                0xAE, 0x9A, 0x5C, 0x51, 0x4B, 0xF5, 0x71, 0x3D, 0x14, 0x5F, 0xA9, 0xDE, 0x48, 0xBD, 0x2F, 0xCC,
                0x47, 0x25, 0x1E, 0x1E, 0x1E, 0xBA, 0x5C, 0xFC, 0xA7, 0x51, 0xBB, 0xD6, 0xDF, 0x61, 0xBD, 0x3E,
                0x68, 0xFA, 0x2A, 0xBB, 0xBC, 0xBC, 0x74, 0x07, 0xC6, 0x1F, 0xB4, 0x22, 0x9F, 0xB4, 0x97, 0xBE,
                0x33, 0x84, 0x7A, 0xFE, 0x0B, 0x64, 0x7D, 0x27, 0xE7, 0x89, 0xC7, 0xA9, 0xF4, 0xAD, 0x0A, 0x02,
                0xCF, 0xCE, 0xCE, 0xDC, 0x89, 0x2D, 0x82, 0x5C, 0x65, 0x3D, 0xDE, 0x0D, 0x87, 0x42, 0xDF, 0x4E,
                0xF5, 0x70, 0x14, 0x5E, 0x03, 0x61, 0x8B, 0xF7, 0x1A, 0xA0, 0x69, 0x70, 0x70, 0xD0, 0x55, 0x8F,
                0x3F, 0xB0, 0x45, 0x90, 0x8B, 0xF6, 0xC5, 0x7A, 0x7D, 0x48, 0x34, 0xE4, 0xBD, 0xBD, 0xBD, 0xCC,
                0x3C, 0x53, 0x04, 0x39, 0x1C, 0x72, 0xF3, 0x72, 0x8A, 0x16, 0xB2, 0x17, 0x56, 0x34, 0x4D, 0x36,
                0xFB, 0x3C, 0xAC, 0xC8, 0xB2, 0x4A, 0xF6, 0x53, 0x7E, 0xA3, 0xAA, 0x2C, 0xAA, 0x1C, 0xFD, 0x8E,
                0x6F, 0xB5, 0xBE, 0x13, 0x84, 0x95, 0x5C, 0x04, 0xB9, 0x6A, 0x25, 0x5B, 0x0C, 0xB1, 0x2D, 0x69,
                0xD7, 0x65, 0x95, 0xFC, 0xF2, 0xF2, 0x52, 0x6F, 0x55, 0x80, 0x59, 0x76, 0x27, 0x57, 0x59, 0x1F,
                0x42, 0x46, 0x65, 0x60, 0xF0, 0xC3, 0xDD, 0xDA, 0xA8, 0x92, 0x71, 0xD8, 0xF4, 0x9D, 0xEC, 0x07,
                0x9D, 0xA3, 0xA3, 0x23, 0x09, 0xEF, 0x44, 0xC4, 0xBC, 0xBE, 0xBE, 0x76, 0x2D, 0x16, 0xD7, 0x0F,
                0x00, 0x86, 0x90, 0xF5, 0xBE, 0x8D, 0x2A, 0xF9, 0x37, 0x77, 0x32, 0x62, 0xC3, 0xDB, 0xB0, 0xB3,
                0x44, 0x59, 0xC9, 0xE1, 0x34, 0x5B, 0xD6, 0xAE, 0xAB, 0xAC, 0x47, 0xA2, 0xFA, 0x0A, 0xC0, 0xF4,
                0xFB, 0xF0, 0xF0, 0xF0, 0xD7, 0xEF, 0xF2, 0xBC, 0x0E, 0xE1, 0x9F, 0xF9, 0xE9, 0x5A, 0xEB, 0xC9,
                0x9B, 0x6E, 0xFD, 0x2F, 0x85, 0xBB, 0xBB, 0x3B, 0x77, 0x88, 0xEE, 0xEF, 0xEF, 0xDD, 0x94, 0x8C,
                0x8F, 0xDE, 0x37, 0xBC, 0xD3, 0xC3, 0x9F, 0x97, 0x5E, 0x2F, 0xA6, 0x76, 0xFC, 0xF9, 0xFC, 0xFC,
                0x6C, 0x38, 0x5D, 0xFF, 0xA6, 0x55, 0x43, 0xD3, 0x3F, 0x55, 0x72, 0xD9, 0x09, 0xE2, 0xF7, 0xD5,
                0x1C, 0x08, 0x87, 0xC1, 0x6A, 0x6F, 0x55, 0x5F, 0x45, 0xC8, 0xD5, 0xBD, 0x32, 0x5D, 0x19, 0x0E,
                0x6B, 0x79, 0xFF, 0x57, 0x60, 0xB5, 0x21, 0x21, 0x5B, 0x39, 0x19, 0x71, 0x1C, 0x42, 0x8E, 0x18,
                0x8E, 0x95, 0x34, 0x42, 0xB6, 0x72, 0x32, 0xE2, 0x38, 0x84, 0x1C, 0x31, 0x1C, 0x2B, 0x69, 0x84,
                0x6C, 0xE5, 0x64, 0xC4, 0x71, 0x08, 0x39, 0x62, 0x38, 0x56, 0xD2, 0x08, 0xD9, 0xCA, 0xC9, 0x88,
                0xE3, 0x10, 0x72, 0xC4, 0x70, 0xAC, 0xA4, 0x11, 0xB2, 0x95, 0x93, 0x11, 0xC7, 0x21, 0xE4, 0x88,
                0xE1, 0x58, 0x49, 0x23, 0x64, 0x2B, 0x27, 0x23, 0x8E, 0x43, 0xC8, 0x11, 0xC3, 0xB1, 0x92, 0x46,
                0xC8, 0x56, 0x4E, 0x46, 0x1C, 0x87, 0x90, 0x23, 0x86, 0x63, 0x25, 0x8D, 0x90, 0xAD, 0x9C, 0x8C,
                0x38, 0x0E, 0x21, 0x47, 0x0C, 0xC7, 0x4A, 0x1A, 0x21, 0x5B, 0x39, 0x19, 0x71, 0x1C, 0x42, 0x8E,
                0x18, 0x8E, 0x95, 0x34, 0x42, 0xB6, 0x72, 0x32, 0xE2, 0x38, 0x84, 0x1C, 0x31, 0x1C, 0x2B, 0x69,
                0x84, 0x6C, 0xE5, 0x64, 0xC4, 0x71, 0x08, 0x39, 0x62, 0x38, 0x56, 0xD2, 0x08, 0xD9, 0xCA, 0xC9,
                0x88, 0xE3, 0xD4, 0x21, 0x47, 0xAC, 0x91, 0xD2, 0x0C, 0x1C, 0xF8, 0x03, 0xAE, 0x76, 0x2D, 0x3D,
                0x22, 0xF9, 0x90, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
            };
            fileStorage.Add(Database, file2);
            Database.AssignToken(diagramPhrictionDocument.Token, file2.Token, Language.NotApplicable);

            HttpServer.PreloadFileMacros(EncryptionKey);
        }

        public JsonConfiguration.UnitTest ParseTestConfiguration(string jsonFile)
        {
            string jsonData = File.ReadAllText(jsonFile);
            JsonConfiguration.UnitTest result = JsonConvert.DeserializeObject<JsonConfiguration.UnitTest>(jsonData);

            return result;
        }

        /// <summary>
        /// Releases all resources
        /// </summary>
        public virtual void Dispose()
        {
            if (Database != null)
            {
                Database.Dispose();
                Database = null;
            }

            if (HttpServer != null)
            {
                HttpServer.Stop();
                HttpServer = null;
            }

            try
            {
                System.IO.File.Delete(Storage.Database.DataSource);
            }
            catch (Exception.InvalidConfigurationException)
            {
                // some unit tests don't use a SQLite database and might throw a InvalidConfigurationException
            }
        }
    }
}
